from flask import Flask, Response, render_template, redirect, url_for, request, Blueprint, jsonify
import threading, gspread, os, qrcode, smtplib, hashlib, random, json
import pandas as pd

from globalDeclarations import *
from Utilities import *

app = Flask(__name__, static_folder="_registration", template_folder="_registration")

from flask_cors import CORS

cors = CORS(app, resources={r"/*": {"origins": "*"}})

'''
The following 3 lines connect to the Google Sheets using a JSON file 
(generated by enabling GCP Google Sheets and generating Auth credentials)

'''



# Enter the sheet you want to access
# wks = excel.worksheet("Sheet1")

data = None
lock = threading.Lock()

@app.route("/scan",methods=["GET"])
def scan():
    return render_template("verify.html")

@app.route("/verify",methods=["POST"])
def verify():
    retrieved = request.get_json()
    wks = excel.worksheet("Verify")
    cell_list = wks.findall(retrieved["hex"])
    for all in range(len(cell_list)):
        cell_list[all] = str(chr(cell_list[all].col+64)) + str(cell_list[all].row)
    data = dict()
    if len(cell_list) > 0:

        data = {
            "name": wks.acell(f"A{cell_list[0][1:]}").value,
            "email": wks.acell(f"B{cell_list[0][1:]}").value
        }
        data["participants"] = []
        data["comp"] = []

        flag = False

        for all in cell_list:
            if "0" in wks.acell(f"F{all[1:]}").value:
                data["participants"].append(int(wks.acell(f"C{all[1:]}").value))
                comp = wks.acell(f"D{all[1:]}").value
                if comp not in data["comp"]:
                    data["comp"].append(comp)
                wks.update(range_name = f"F{all[1:]}",values=[[1]])
                mark_green(wks,all[1:])
            else:
                print(f"F{all[1:]}" + " " + wks.acell(f"F{all[1:]}").value)
                mark_yellow(wks,all[1:])
                wks.update(range_name = f"F{all[1:]}",values=[["DUAL VERIFICATION"]])
                flag = True
        
        if flag:
            data["participants"] = "ALREADY VERIFIED"
            data["comp"] = "ALREADY VERIFIED"
        else:
            data["participants"].append(f" | {sum(data['participants'])}")
            data["participants"] = [str(x) for x in data["participants"]]
            data["participants"] = " + ".join(data["participants"][:-1]) + data["participants"][-1]
    else:
        data["name"] = data["email"] = "UNKNOWN"
        data["participants"] = "NOT FOUND"
        data["comp"] = f"{retrieved['hex']} - INCORRECT HEXCODE"
    
    print(data)
    response = jsonify(data)
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
    response.headers.add('Access-Control-Allow-Methods', 'POST')
    response.headers.add('Access-Control-Allow-Credentials', 'true')
    # response.headers.add('Access-Control-Allow-Origin', 'https://devday23.tech')
    
    return response
        

        

            


@app.route("/",methods=["GET"])
def home():
    return render_template("index.html")

@app.route("/otp",methods=['POST'])
def otp():
    data = request.form
    redirect_url = base_url + 'OTP.html?'
    for key, value in data.items():
        redirect_url += key + '=' + str(value) + '&'
    abc = None
    try:
        abc = servac.open_by_key("16Uk9rsf0MMUBFsSWHv0KAt1hpbwjay2TfUiKti3Ceag")
    except Exception as e:
        return "Seems like our OTP counter is a bit busy right now due to 400+ hits on traffic. I'd love to see you try again after some time"
    if abc is not None:
        wks = abc.worksheet("OTP")
    else:
        return "Working to resolve some error currently. We'd love to see you try again later. Sorry for inconvenience!"

    cell = wks.find(data['email'])
    val = None
    ran = random.randint(1000, 10000)
    if cell is not None:
        
        val = "B"+str(cell.row)
        print(val)
        wks.update(str(val), [[ran]])
    else:
        lock.acquire()
        try:
            df = pd.DataFrame(wks.get_all_records(),columns=["Email","OTP"])
            dat = {"Email":data['email'], "OTP":ran}
            df.loc[len(df)] = dat
            #df = df.append(dat,ignore_index=True)
            wks.update([df.columns.values.tolist()] + df.values.tolist())
        finally:
            lock.release()

    mail_message(f'''Greetings {data['name']}!<br><br> To continue with your registration, here's your OTP to be entered: <br><br>
    <span style="font-size: 16px; font-weight: 600; letter-spacing: 0.5em;">{ran}</span><br><br>
    Kindly do not share your OTP with anyone else and once you're done with registration, please delete your OTP!<br><br>
    Team DevDay 2023 thanks for your trust on us and would love to see you in our event on 4th May 2023. In order to open a world of opportunities, you can continue registration.<br><br>
    Regards,<br>Team Devday 2023.''', data)

    return redirect(redirect_url[:-1], code=302)

@app.route("/_registration/education",methods=['POST'])
def education():
    global excel
    data = request.form
    wks = excel.worksheet("OTP")

    cell = wks.find(data['email'])
    if cell is not None:
        val = "B" + str(cell.row)
        value = wks.acell(val).value
        if data['otp'] != value:
            return redirect(base_url + "invalid_OTP.html")
        else:
            redirect_url = base_url + 'education.html?'
            for key, value in data.items():
                redirect_url += key + '=' + str(value) + '&'
            return redirect(redirect_url[:-1], code=302)
    else:
        return "Did you try to change your mail? If yes, you're gonna have to restart the registration process!"


@app.route("/mail", methods=['POST'])
def mail():
    data = request.form
    gsh = servac.open_by_key("1Ad-W3ckxFrC5JnFOhbW0mJGrydvtu3vts9u490yomvM")
    wk = None
    try:
        wk = gsh.worksheet(data['team'])
    except Exception as e:
        return f"{e}"

    df = pd.DataFrame(wk.get_all_records())

    if len(df) == 0:
        return "Koi masla hai"

    if "Mailed" not in df.keys():
        df['Mailed'] = ''

    for all in df.values:
        try:
            if all[4] != "Yes":
                email = all[0].lower() + "@nu.edu.pk"
                if "k" not in all[0]:
                    continue

                name = all[1].upper()
                position = all[3]
                whatsapp = data['wpchat']

                message = f'''
                <p>Hey there {name},<br>
                Congratulations on joining our team {data['team']} as our precious {position}!<br><br>

                We are thrilled to have you on board and look forward to working with you! Your unique skills and talents will be a great asset to the team, and we can't wait to see all that we can achieve together. Welcome to the team, and let's make some magic happen!<br><br>

                Here are some instructions you'll need to follow to connect to us and your colleagues within the team:<br>

                <ul><li> Kindly join the whatsapp link: <a href="{whatsapp}"> Click Here!</a></li>
                '''
                if data['GCR'] != '':
                    message += f'''
                    <li> Also connect to us using Google Classroom => Code: {data['GCR']}</li><br>
                    '''

                message += f'''</ul></p>
                <p>Once again thanks for being a part of us!<br><br>
                Wishing a successful journey to you with {data['team']} till DEVDAY and afterwards!</p>
                <p>Regards,<br>{data['name']},<br>Head of team {data['team']},<br>TEAM ACM NUCES DEVDAY 2023.<br><br>Mailed by: Fouzan Asif, Head of Team Automation.</p>
                '''

                msg = MIMEMultipart()
                msg['From'] = "Fouzan Asif"
                msg['To'] = email
                msg['Subject'] = f"CONGRATS - {data['team']}"

                msg.attach(MIMEText(message, 'html'))


                server = smtplib.SMTP('smtp.gmail.com', 587)
                server.starttls()
                server.login(mymail, password)
                text = msg.as_string()
                server.sendmail(mymail, email, text)
                server.quit()
                df.loc[df['NU-ID (k******)'] == all[0], 'Mailed'] = "Yes"

                wk.update([df.columns.values.tolist()] + df.values.tolist())

        except Exception as e:
            return f"{e}. Try checking the mails of members. If the error doesn't resolve, mujhe whatsapp pe message karlo. Fouzan :-) Ez"
    return "done"

@app.route("/_registration/info", methods=['GET','POST'])
def info():
    global data
    data = request.form
    data = dict(data)

    if data['category'] == "CS Competitions":
        redirect_url = base_url + 'CSCompetitions.html?'
        for key, value in data.items():
            redirect_url += key + '=' + str(value) + '&'
        return redirect(redirect_url[:-1], code=302)
    else:
        redirect_url = base_url + 'EECompetitions.html?'
        for key, value in data.items():
            redirect_url += key + '=' + str(value) + '&'
        return redirect(redirect_url[:-1], code=302)


    #     return render_template("CSCompetitions.html",name=data['name'],email=data['email'],contact=data['contact'],category=data['category'])
    # elif data['category'] == "EE Competitions":
    #     return render_template("EECompetitions.html",name=data['name'],email=data['email'],contact=data['contact'],category=data['category'])


@app.route("/_registration/submit",methods=["POST"])
def submit():
    global excel

    wks = excel.worksheet("Participants")
    data = request.form
    df = pd.DataFrame(wks.get_all_records())
    
    if len(df) > 0:
        df2 = df[df['comp'] == data['comp']]
        if df2 is not None and len(df2) >= limit[data['comp']]:
            participant = { "name":data['name'],
                    "email":data['email'].lower(),
                    "contact":data['contact'],
                    "category":data['category'],
                    "comp":data['comp']
                }
            wks2 = excel.worksheet("Waiting")
            k = pd.DataFrame(wks2.get_all_records())
            if len(k) > 0:
                k.loc[len(df)] = participant
            else:
                k = pd.DataFrame(participant,columns=["name","email","contact","category","comp"],index=[participant])
            wks2.update([k.columns.values.tolist()] + k.values.tolist())

            return redirect(base_url + "waiting.html")

    data = dict(data)

    data['Hex'] = hashfunc(data['email'].lower())

    if len(df) > 0:
        vals = df['Hex'].values

        if data['Hex'] in vals:
            return redirect(base_url + "already_reg.html")

    if data['uni'] == "FAST NUCES":
        redirect_url = base_url + f'first.html?year={data["year"]}&'
        for key, value in data.items():
            if key != "year":
                redirect_url += key + '=' + str(value) + '&'
        return redirect(redirect_url[:-1], code=302)

    else:
        return redirect(success(data))

def checkpoint(data,entry):
    global excel
    global nk
    wks = excel.worksheet("University")
    lock.acquire()
    try:
        df = pd.DataFrame(wks.get_all_records())
        df2 = []
        done = []
        if len(df) > 0:
            done = df[(df["Hexcode"] == hashfunc(data["email"].lower())) & (df["Entry"] == entry)]
        
        df2 = df[df['id'] == data['id']]
        if len(df2) == 0 and done is None:
            dat = {'id':data['id'], 'department':data['department'], 'section':data['section'], 'course':data['course'], 'year':data['year'], 'Hexcode':hashfunc(data['email']),
            "Entry":entry}
            if len(df) == 0:
                df = pd.DataFrame(dat,columns=["id","department","section","course","year","Hexcode","Entry"],index=[dat])
            else:
                df.loc[len(df)] = dat
            #df = df.append(dat,ignore_index=True)
            print(df)
            # try:
            wks.update([df.columns.values.tolist()] + df.values.tolist())
            lock.release()
            # except Exception as e:
            #     lock.release()
            #     df.values[-2,5]="REASSIGN"
            #     wks.update([df.columns.values.tolist()] + df.values.tolist())
            #     return base_url + "problem.html"
            return True
        else:
            lock.release()
            return False
    finally:
        pass


@app.route("/_registration/first", methods=["POST"])
def first():
    global excel
    data = request.form
    data = dict(data)
    if "course" not in data.keys():
        data['course'] = ""

    checkpoint(data,1)
    if int(data['parts']) >= 2:
        redirect_url = base_url + "second.html?"
        for key, value in data.items():
            if key not in ["id","department","section","course"]:
                redirect_url += key + '=' + str(value) + '&'
        return redirect(redirect_url[:-1], code=302)
    else:
        return redirect(success(data))


@app.route("/_registration/second", methods=["POST"])
def second():
    global excel, nk
    data = request.form
    data = dict(data)
    if "course" not in data.keys():
        data['course'] = ""
    checkpoint(data,2)
    if int(data['parts']) >= 3:
        redirect_url = base_url + "third.html?"
        for key, value in data.items():
            if key not in ["id","department","section","course"]:
                redirect_url += key + '=' + str(value) + '&'
        return redirect(redirect_url[:-1], code=302)
    else:
        return redirect(success(data))

@app.route("/_registration/third", methods=["POST"])
def third():
    global excel
    data = request.form
    data = dict(data)
    if "course" not in data.keys():
        data['course'] = ""
    checkpoint(data,3)
    if int(data['parts']) >= 4:
        redirect_url = base_url + "fourth.html?"
        for key, value in data.items():
            if key not in ["id","department","section","course"]:
                redirect_url += key + '=' + str(value) + '&'
        return redirect(redirect_url[:-1], code=302)
    else:
        return redirect(success(data))


@app.route("/_registration/fourth", methods=["POST"])
def fourth():
    global excel
    data = request.form
    data = dict(data)
    if "course" not in data.keys():
        data['course'] = ""
    checkpoint(data,4)
    if int(data['parts']) >= 5:
        redirect_url = base_url + "fifth.html?"
        for key, value in data.items():
            if key not in ["id","department","section","course"]:
                redirect_url += key + '=' + str(value) + '&'
        return redirect(redirect_url[:-1], code=302)
    else:
        return redirect(success(data))

@app.route("/_registration/fifth", methods=["POST"])
def fifth():
    global excel
    data = request.form
    data = dict(data)
    if "course" not in data.keys():
        data['course'] = ""
    checkpoint(data,5)
    return redirect(success(data))


@app.route("/register", methods=['GET','POST'])
def register():
    data = request.get_json()
    return redirect(success(data))

if __name__ == "__main__":
    app.run(port=9922,debug=True)